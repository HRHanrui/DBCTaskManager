// TaskListCtrl.cpp : implementation file
//

#include "stdafx.h"
#include "DBCTaskman.h"
#include "TaskListCtrl.h"


// CTaskListCtrl

IMPLEMENT_DYNAMIC(CTaskListCtrl, CListCtrl)

CTaskListCtrl::CTaskListCtrl()
{

}

CTaskListCtrl::~CTaskListCtrl()
{
}


BEGIN_MESSAGE_MAP(CTaskListCtrl, CListCtrl)
	ON_NOTIFY_REFLECT(LVN_DELETEITEM, &CTaskListCtrl::OnLvnDeleteitem)
	ON_WM_KEYDOWN()
//	ON_WM_MEASUREITEM()
END_MESSAGE_MAP()



// CTaskListCtrl message handlers



void CTaskListCtrl::OnLvnDeleteitem(NMHDR *pNMHDR, LRESULT *pResult)
{
	LPNMLISTVIEW pNMLV = reinterpret_cast<LPNMLISTVIEW>(pNMHDR);
	// TODO: Add your control notification handler code here
	//pNMLV->
	*pResult = 0;
}

void CTaskListCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	// TODO: Add your message handler code here and/or call default

	if(nChar == VK_DELETE)
	{


	this->DeleteItem(GetSelectionMark());
	}

	CListCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

//void CTaskListCtrl::OnMeasureItem(int nIDCtl, LPMEASUREITEMSTRUCT lpMeasureItemStruct)
//{
//	// TODO: Add your message handler code here and/or call default
//
//	CListCtrl::OnMeasureItem(nIDCtl, lpMeasureItemStruct);
//}
